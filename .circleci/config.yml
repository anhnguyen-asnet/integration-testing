# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2

jobs:
  build:
    # machine:
    #   enabled: true
    docker:
    #   # specify the version you desire here
    #   # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.5

    #   # Specify service dependencies here if necessary
    #   # CircleCI maintains a library of pre-built images
    #   # documented at https://circleci.com/docs/2.0/circleci-images/
    #   - image: circleci/postgres:9.4
    #     environment:
    #       POSTGRES_USER: root
    #       POSTGRES_DB: circle-test_test

    working_directory: ~/repo

    steps:
      - checkout
      - run: echo "A first hello world"

      - run:
          name: checkout code
          command: git clone -b ${CIRCLE_BRANCH} git@github.com:anhnguyen-asnet/circleci-example.git

      # - run:
      #     name: Run Postgres container
      #     command: |
      #       docker run -d \
      #       -e POSTGRES_USER='testdb' \
      #       -e POSTGRES_DB='testdb' \
      #       -e POSTGRES_PASSWORD='testdb' \
      #       -e POSTGRES_HOST=127.0.0.1 \
      #       --name dbtest \
      #       -p 5432:5432 \
      #       postgres:9.5-alpine

      #       docker ps

      # Setup remote docker
      # - setup_remote_docker
      #     # Enable this flag to speed up image building
      #     docker_layer_caching: true

      # - run:
      #     name: Install Docker Compose
      #     command: |
      #       curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
      #       chmod +x ~/docker-compose
      #       sudo mv ~/docker-compose /usr/local/bin/docker-compose

      # Download and cache dependencies
      # - restore_cache:
      #     keys:
      #     - v1-dependencies-{{ checksum "requirements.txt" }}
      #     # fallback to using the latest cache if no exact match is found
      #     - v1-dependencies-

      # - run:
      #     name: install dependencies
      #     command: |
      #       python3 -m venv venv
      #       . venv/bin/activate
      #       pip install -r requirements.txt

      # - save_cache:
      #     paths:
      #       - ./venv
      #     key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      # - run:
      #     name: run tests
      #     command: |
      #       . venv/bin/activate
      #       python manage.py test

      - store_artifacts:
          path: test-reports
          destination: test-reports
